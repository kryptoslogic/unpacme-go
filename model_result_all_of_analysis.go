/*
 * UnpacMe
 *
 *  # Introduction Welcome to the UNPACME API! All the malware unpacking and file analysis features that you are familiar with on the [unpac.me](https://www.unpac.me/) website are available through our API. You can easily integrate our unpacker into your malware analysis pipeline and begin unpacking at scale!   # Authentication The public UNPACME API is publicly available and can be accessed without authentication.  In order to use the private UNPACME API you must sign up for an account with UNPACME. Once you have a valid user account you can view your personal API key in your user profile.   <SecurityDefinitions />  # Response Structure When interacting with the UNPACME API, if the request was correctly handled, a <b>200</b> HTTP status code will be returned. The body of the response will usually be a JSON object (except for file downloads).  ## Response Status Codes  Status Code  | Description | Notes ------------- | ------------- | - 200  | OK | The request was successful 400  | Bad Request | The request was somehow incorrect. This can be caused by missing arguments or arguments with wrong values. 401 | Unauthorized | The supplied credentials, if any, are not sufficient to access the resource 403 | Forbidden | The account does not have enough privileges to make the request. 404 | Not Found | The requested resource is not found 429  | Too Many Requests | The request frequency has exceeded one of the account quotas (minute, daily or monthly). Monthly quotas are reset on the 1st of the month at 00:00 UTC. 500 | Server Error | The server could not return the representation due to an internal server error   ## Error Response  If an error has occurred while handling the request an error status code will be returend along with a JSON error message with the following properties.   Property  | Description ------------- | ------------- Error  | The error type Description  | A more informative message  # Example Clients  The following clients can be used to interact with the UNPACME API directly and are provided as examples. These clients are community projects and are not maintained or developed by UNPACME. UNPACME makes no claim as to the safety of these clients, use at your own risk.    - [UnpacMe Client](https://github.com/larsborn/UnpacMeClient) (Python)   - [UnpacMe Library](https://github.com/R3MRUM/unpacme) (Python)  <br> 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResultAllOfAnalysis struct for ResultAllOfAnalysis
type ResultAllOfAnalysis struct {
	Exports *ResultAllOfAnalysisExports `json:"exports,omitempty"`
	Imports *ResultAllOfAnalysisImports `json:"imports,omitempty"`
	Metadata *ResultAllOfAnalysisMetadata `json:"metadata,omitempty"`
	Resources *[]ResourceEntity `json:"resources,omitempty"`
	RichHeaders *ResultAllOfAnalysisRichHeaders `json:"rich_headers,omitempty"`
	Sections *[]Section `json:"sections,omitempty"`
}

// NewResultAllOfAnalysis instantiates a new ResultAllOfAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultAllOfAnalysis() *ResultAllOfAnalysis {
	this := ResultAllOfAnalysis{}
	return &this
}

// NewResultAllOfAnalysisWithDefaults instantiates a new ResultAllOfAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultAllOfAnalysisWithDefaults() *ResultAllOfAnalysis {
	this := ResultAllOfAnalysis{}
	return &this
}

// GetExports returns the Exports field value if set, zero value otherwise.
func (o *ResultAllOfAnalysis) GetExports() ResultAllOfAnalysisExports {
	if o == nil || o.Exports == nil {
		var ret ResultAllOfAnalysisExports
		return ret
	}
	return *o.Exports
}

// GetExportsOk returns a tuple with the Exports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysis) GetExportsOk() (*ResultAllOfAnalysisExports, bool) {
	if o == nil || o.Exports == nil {
		return nil, false
	}
	return o.Exports, true
}

// HasExports returns a boolean if a field has been set.
func (o *ResultAllOfAnalysis) HasExports() bool {
	if o != nil && o.Exports != nil {
		return true
	}

	return false
}

// SetExports gets a reference to the given ResultAllOfAnalysisExports and assigns it to the Exports field.
func (o *ResultAllOfAnalysis) SetExports(v ResultAllOfAnalysisExports) {
	o.Exports = &v
}

// GetImports returns the Imports field value if set, zero value otherwise.
func (o *ResultAllOfAnalysis) GetImports() ResultAllOfAnalysisImports {
	if o == nil || o.Imports == nil {
		var ret ResultAllOfAnalysisImports
		return ret
	}
	return *o.Imports
}

// GetImportsOk returns a tuple with the Imports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysis) GetImportsOk() (*ResultAllOfAnalysisImports, bool) {
	if o == nil || o.Imports == nil {
		return nil, false
	}
	return o.Imports, true
}

// HasImports returns a boolean if a field has been set.
func (o *ResultAllOfAnalysis) HasImports() bool {
	if o != nil && o.Imports != nil {
		return true
	}

	return false
}

// SetImports gets a reference to the given ResultAllOfAnalysisImports and assigns it to the Imports field.
func (o *ResultAllOfAnalysis) SetImports(v ResultAllOfAnalysisImports) {
	o.Imports = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ResultAllOfAnalysis) GetMetadata() ResultAllOfAnalysisMetadata {
	if o == nil || o.Metadata == nil {
		var ret ResultAllOfAnalysisMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysis) GetMetadataOk() (*ResultAllOfAnalysisMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ResultAllOfAnalysis) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ResultAllOfAnalysisMetadata and assigns it to the Metadata field.
func (o *ResultAllOfAnalysis) SetMetadata(v ResultAllOfAnalysisMetadata) {
	o.Metadata = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ResultAllOfAnalysis) GetResources() []ResourceEntity {
	if o == nil || o.Resources == nil {
		var ret []ResourceEntity
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysis) GetResourcesOk() (*[]ResourceEntity, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ResultAllOfAnalysis) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []ResourceEntity and assigns it to the Resources field.
func (o *ResultAllOfAnalysis) SetResources(v []ResourceEntity) {
	o.Resources = &v
}

// GetRichHeaders returns the RichHeaders field value if set, zero value otherwise.
func (o *ResultAllOfAnalysis) GetRichHeaders() ResultAllOfAnalysisRichHeaders {
	if o == nil || o.RichHeaders == nil {
		var ret ResultAllOfAnalysisRichHeaders
		return ret
	}
	return *o.RichHeaders
}

// GetRichHeadersOk returns a tuple with the RichHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysis) GetRichHeadersOk() (*ResultAllOfAnalysisRichHeaders, bool) {
	if o == nil || o.RichHeaders == nil {
		return nil, false
	}
	return o.RichHeaders, true
}

// HasRichHeaders returns a boolean if a field has been set.
func (o *ResultAllOfAnalysis) HasRichHeaders() bool {
	if o != nil && o.RichHeaders != nil {
		return true
	}

	return false
}

// SetRichHeaders gets a reference to the given ResultAllOfAnalysisRichHeaders and assigns it to the RichHeaders field.
func (o *ResultAllOfAnalysis) SetRichHeaders(v ResultAllOfAnalysisRichHeaders) {
	o.RichHeaders = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *ResultAllOfAnalysis) GetSections() []Section {
	if o == nil || o.Sections == nil {
		var ret []Section
		return ret
	}
	return *o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysis) GetSectionsOk() (*[]Section, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *ResultAllOfAnalysis) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given []Section and assigns it to the Sections field.
func (o *ResultAllOfAnalysis) SetSections(v []Section) {
	o.Sections = &v
}

func (o ResultAllOfAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Exports != nil {
		toSerialize["exports"] = o.Exports
	}
	if o.Imports != nil {
		toSerialize["imports"] = o.Imports
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if o.RichHeaders != nil {
		toSerialize["rich_headers"] = o.RichHeaders
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}
	return json.Marshal(toSerialize)
}

type NullableResultAllOfAnalysis struct {
	value *ResultAllOfAnalysis
	isSet bool
}

func (v NullableResultAllOfAnalysis) Get() *ResultAllOfAnalysis {
	return v.value
}

func (v *NullableResultAllOfAnalysis) Set(val *ResultAllOfAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableResultAllOfAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableResultAllOfAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultAllOfAnalysis(val *ResultAllOfAnalysis) *NullableResultAllOfAnalysis {
	return &NullableResultAllOfAnalysis{value: val, isSet: true}
}

func (v NullableResultAllOfAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultAllOfAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


