/*
 * UnpacMe
 *
 *  # Introduction Welcome to the UNPACME API! All the malware unpacking and file analysis features that you are familiar with on the [unpac.me](https://www.unpac.me/) website are available through our API. You can easily integrate our unpacker into your malware analysis pipeline and begin unpacking at scale!   # Authentication The public UNPACME API is publicly available and can be accessed without authentication.  In order to use the private UNPACME API you must sign up for an account with UNPACME. Once you have a valid user account you can view your personal API key in your user profile.   <SecurityDefinitions />  # Response Structure When interacting with the UNPACME API, if the request was correctly handled, a <b>200</b> HTTP status code will be returned. The body of the response will usually be a JSON object (except for file downloads).  ## Response Status Codes  Status Code  | Description | Notes ------------- | ------------- | - 200  | OK | The request was successful 400  | Bad Request | The request was somehow incorrect. This can be caused by missing arguments or arguments with wrong values. 401 | Unauthorized | The supplied credentials, if any, are not sufficient to access the resource 403 | Forbidden | The account does not have enough privileges to make the request. 404 | Not Found | The requested resource is not found 429  | Too Many Requests | The request frequency has exceeded one of the account quotas (minute, daily or monthly). Monthly quotas are reset on the 1st of the month at 00:00 UTC. 500 | Server Error | The server could not return the representation due to an internal server error   ## Error Response  If an error has occurred while handling the request an error status code will be returend along with a JSON error message with the following properties.   Property  | Description ------------- | ------------- Error  | The error type Description  | A more informative message  # Example Clients  The following clients can be used to interact with the UNPACME API directly and are provided as examples. These clients are community projects and are not maintained or developed by UNPACME. UNPACME makes no claim as to the safety of these clients, use at your own risk.    - [UnpacMe Client](https://github.com/larsborn/UnpacMeClient) (Python)   - [UnpacMe Library](https://github.com/R3MRUM/unpacme) (Python)  <br> 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Resource PE file resource
type Resource struct {
	// Codepage
	Codepage int32 `json:"codepage"`
	// Language
	Lang string `json:"lang"`
	// Resource type
	MagicType string `json:"magic_type"`
	// Resource offset
	Offset int32 `json:"offset"`
	// Resource size
	Size int32 `json:"size"`
	// Sub-Language
	Sublang string `json:"sublang"`
}

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource(codepage int32, lang string, magicType string, offset int32, size int32, sublang string, ) *Resource {
	this := Resource{}
	this.Codepage = codepage
	this.Lang = lang
	this.MagicType = magicType
	this.Offset = offset
	this.Size = size
	this.Sublang = sublang
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetCodepage returns the Codepage field value
func (o *Resource) GetCodepage() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Codepage
}

// GetCodepageOk returns a tuple with the Codepage field value
// and a boolean to check if the value has been set.
func (o *Resource) GetCodepageOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Codepage, true
}

// SetCodepage sets field value
func (o *Resource) SetCodepage(v int32) {
	o.Codepage = v
}

// GetLang returns the Lang field value
func (o *Resource) GetLang() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Lang
}

// GetLangOk returns a tuple with the Lang field value
// and a boolean to check if the value has been set.
func (o *Resource) GetLangOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lang, true
}

// SetLang sets field value
func (o *Resource) SetLang(v string) {
	o.Lang = v
}

// GetMagicType returns the MagicType field value
func (o *Resource) GetMagicType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MagicType
}

// GetMagicTypeOk returns a tuple with the MagicType field value
// and a boolean to check if the value has been set.
func (o *Resource) GetMagicTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MagicType, true
}

// SetMagicType sets field value
func (o *Resource) SetMagicType(v string) {
	o.MagicType = v
}

// GetOffset returns the Offset field value
func (o *Resource) GetOffset() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *Resource) GetOffsetOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *Resource) SetOffset(v int32) {
	o.Offset = v
}

// GetSize returns the Size field value
func (o *Resource) GetSize() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Resource) GetSizeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Resource) SetSize(v int32) {
	o.Size = v
}

// GetSublang returns the Sublang field value
func (o *Resource) GetSublang() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Sublang
}

// GetSublangOk returns a tuple with the Sublang field value
// and a boolean to check if the value has been set.
func (o *Resource) GetSublangOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sublang, true
}

// SetSublang sets field value
func (o *Resource) SetSublang(v string) {
	o.Sublang = v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["codepage"] = o.Codepage
	}
	if true {
		toSerialize["lang"] = o.Lang
	}
	if true {
		toSerialize["magic_type"] = o.MagicType
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["sublang"] = o.Sublang
	}
	return json.Marshal(toSerialize)
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


