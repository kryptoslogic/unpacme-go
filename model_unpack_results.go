/*
 * UnpacMe
 *
 *  # Introduction Welcome to the UNPACME API! All the malware unpacking and file analysis features that you are familiar with on the [unpac.me](https://www.unpac.me/) website are available through our API. You can easily integrate our unpacker into your malware analysis pipeline and begin unpacking at scale!   # Authentication The public UNPACME API is publicly available and can be accessed without authentication.  In order to use the private UNPACME API you must sign up for an account with UNPACME. Once you have a valid user account you can view your personal API key in your user profile.   <SecurityDefinitions />  # Response Structure When interacting with the UNPACME API, if the request was correctly handled, a <b>200</b> HTTP status code will be returned. The body of the response will usually be a JSON object (except for file downloads).  ## Response Status Codes  Status Code  | Description | Notes ------------- | ------------- | - 200  | OK | The request was successful 400  | Bad Request | The request was somehow incorrect. This can be caused by missing arguments or arguments with wrong values. 401 | Unauthorized | The supplied credentials, if any, are not sufficient to access the resource 403 | Forbidden | The account does not have enough privileges to make the request. 404 | Not Found | The requested resource is not found 429  | Too Many Requests | The request frequency has exceeded one of the account quotas (minute, daily or monthly). Monthly quotas are reset on the 1st of the month at 00:00 UTC. 500 | Server Error | The server could not return the representation due to an internal server error   ## Error Response  If an error has occurred while handling the request an error status code will be returend along with a JSON error message with the following properties.   Property  | Description ------------- | ------------- Error  | The error type Description  | A more informative message  # Example Clients  The following clients can be used to interact with the UNPACME API directly and are provided as examples. These clients are community projects and are not maintained or developed by UNPACME. UNPACME makes no claim as to the safety of these clients, use at your own risk.    - [UnpacMe Client](https://github.com/larsborn/UnpacMeClient) (Python)   - [UnpacMe Library](https://github.com/R3MRUM/unpacme) (Python)  <br> 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UnpackResults Unpack submission results
type UnpackResults struct {
	// Unpack submission ID
	Id string `json:"id"`
	Status Status `json:"status"`
	// SHA256 hash of the submitted file
	Sha256 string `json:"sha256"`
	// Timestamp of original submission (in UTC)
	Time float32 `json:"time"`
	// Sample is private
	Private *bool `json:"private,omitempty"`
	// Sample was submitted by current user
	UserSubmitted *bool `json:"user_submitted,omitempty"`
	// Array of results from submission, including the parent
	Results []Result `json:"results"`
}

// NewUnpackResults instantiates a new UnpackResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnpackResults(id string, status Status, sha256 string, time float32, results []Result, ) *UnpackResults {
	this := UnpackResults{}
	this.Id = id
	this.Status = status
	this.Sha256 = sha256
	this.Time = time
	this.Results = results
	return &this
}

// NewUnpackResultsWithDefaults instantiates a new UnpackResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnpackResultsWithDefaults() *UnpackResults {
	this := UnpackResults{}
	return &this
}

// GetId returns the Id field value
func (o *UnpackResults) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UnpackResults) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *UnpackResults) GetStatus() Status {
	if o == nil  {
		var ret Status
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetStatusOk() (*Status, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UnpackResults) SetStatus(v Status) {
	o.Status = v
}

// GetSha256 returns the Sha256 field value
func (o *UnpackResults) GetSha256() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetSha256Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sha256, true
}

// SetSha256 sets field value
func (o *UnpackResults) SetSha256(v string) {
	o.Sha256 = v
}

// GetTime returns the Time field value
func (o *UnpackResults) GetTime() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetTimeOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *UnpackResults) SetTime(v float32) {
	o.Time = v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *UnpackResults) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *UnpackResults) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *UnpackResults) SetPrivate(v bool) {
	o.Private = &v
}

// GetUserSubmitted returns the UserSubmitted field value if set, zero value otherwise.
func (o *UnpackResults) GetUserSubmitted() bool {
	if o == nil || o.UserSubmitted == nil {
		var ret bool
		return ret
	}
	return *o.UserSubmitted
}

// GetUserSubmittedOk returns a tuple with the UserSubmitted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetUserSubmittedOk() (*bool, bool) {
	if o == nil || o.UserSubmitted == nil {
		return nil, false
	}
	return o.UserSubmitted, true
}

// HasUserSubmitted returns a boolean if a field has been set.
func (o *UnpackResults) HasUserSubmitted() bool {
	if o != nil && o.UserSubmitted != nil {
		return true
	}

	return false
}

// SetUserSubmitted gets a reference to the given bool and assigns it to the UserSubmitted field.
func (o *UnpackResults) SetUserSubmitted(v bool) {
	o.UserSubmitted = &v
}

// GetResults returns the Results field value
func (o *UnpackResults) GetResults() []Result {
	if o == nil  {
		var ret []Result
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *UnpackResults) GetResultsOk() (*[]Result, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Results, true
}

// SetResults sets field value
func (o *UnpackResults) SetResults(v []Result) {
	o.Results = v
}

func (o UnpackResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["sha256"] = o.Sha256
	}
	if true {
		toSerialize["time"] = o.Time
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.UserSubmitted != nil {
		toSerialize["user_submitted"] = o.UserSubmitted
	}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableUnpackResults struct {
	value *UnpackResults
	isSet bool
}

func (v NullableUnpackResults) Get() *UnpackResults {
	return v.value
}

func (v *NullableUnpackResults) Set(val *UnpackResults) {
	v.value = val
	v.isSet = true
}

func (v NullableUnpackResults) IsSet() bool {
	return v.isSet
}

func (v *NullableUnpackResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnpackResults(val *UnpackResults) *NullableUnpackResults {
	return &NullableUnpackResults{value: val, isSet: true}
}

func (v NullableUnpackResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnpackResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


