/*
 * UnpacMe
 *
 *  # Introduction Welcome to the UNPACME API! All the malware unpacking and file analysis features that you are familiar with on the [unpac.me](https://www.unpac.me/) website are available through our API. You can easily integrate our unpacker into your malware analysis pipeline and begin unpacking at scale!   # Authentication The public UNPACME API is publicly available and can be accessed without authentication.  In order to use the private UNPACME API you must sign up for an account with UNPACME. Once you have a valid user account you can view your personal API key in your user profile.   <SecurityDefinitions />  # Response Structure When interacting with the UNPACME API, if the request was correctly handled, a <b>200</b> HTTP status code will be returned. The body of the response will usually be a JSON object (except for file downloads).  ## Response Status Codes  Status Code  | Description | Notes ------------- | ------------- | - 200  | OK | The request was successful 400  | Bad Request | The request was somehow incorrect. This can be caused by missing arguments or arguments with wrong values. 401 | Unauthorized | The supplied credentials, if any, are not sufficient to access the resource 403 | Forbidden | The account does not have enough privileges to make the request. 404 | Not Found | The requested resource is not found 429  | Too Many Requests | The request frequency has exceeded one of the account quotas (minute, daily or monthly). Monthly quotas are reset on the 1st of the month at 00:00 UTC. 500 | Server Error | The server could not return the representation due to an internal server error   ## Error Response  If an error has occurred while handling the request an error status code will be returend along with a JSON error message with the following properties.   Property  | Description ------------- | ------------- Error  | The error type Description  | A more informative message  # Example Clients  The following clients can be used to interact with the UNPACME API directly and are provided as examples. These clients are community projects and are not maintained or developed by UNPACME. UNPACME makes no claim as to the safety of these clients, use at your own risk.    - [UnpacMe Client](https://github.com/larsborn/UnpacMeClient) (Python)   - [UnpacMe Library](https://github.com/R3MRUM/unpacme) (Python)  <br> 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResultAllOfAnalysisMetadata struct for ResultAllOfAnalysisMetadata
type ResultAllOfAnalysisMetadata struct {
	Characteristics *[]string `json:"Characteristics,omitempty"`
	// PE file checksum
	Checksum *int32 `json:"Checksum,omitempty"`
	// PE file compile time
	CompileTime *string `json:"Compile Time,omitempty"`
	// PE file contains compressed data
	ContainsCompressedData *bool `json:"Contains Compressed Data,omitempty"`
	// Entry point first 16 bytes
	EPBytes *string `json:"EP Bytes,omitempty"`
	// PE file entry point
	EntryPoint *int32 `json:"Entry Point,omitempty"`
	// PE file image base
	ImageBase *int64 `json:"Image Base,omitempty"`
	// PE file linker version
	LinkerVersion *string `json:"Linker Version,omitempty"`
	// PE file program database file path
	PDBPath *string `json:"PDB Path,omitempty"`
	// Number of sections
	Sections *int32 `json:"Sections,omitempty"`
	// PE file signature
	Signature *int32 `json:"Signature,omitempty"`
	// PE file size
	Size *int32 `json:"Size,omitempty"`
	// PE file subsystem
	Subsystem *string `json:"Subsystem,omitempty"`
	// PE file type
	Type *string `json:"Type,omitempty"`
	VersionInfo *ResultAllOfAnalysisMetadataVersionInfo `json:"VersionInfo,omitempty"`
}

// NewResultAllOfAnalysisMetadata instantiates a new ResultAllOfAnalysisMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultAllOfAnalysisMetadata() *ResultAllOfAnalysisMetadata {
	this := ResultAllOfAnalysisMetadata{}
	return &this
}

// NewResultAllOfAnalysisMetadataWithDefaults instantiates a new ResultAllOfAnalysisMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultAllOfAnalysisMetadataWithDefaults() *ResultAllOfAnalysisMetadata {
	this := ResultAllOfAnalysisMetadata{}
	return &this
}

// GetCharacteristics returns the Characteristics field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetCharacteristics() []string {
	if o == nil || o.Characteristics == nil {
		var ret []string
		return ret
	}
	return *o.Characteristics
}

// GetCharacteristicsOk returns a tuple with the Characteristics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetCharacteristicsOk() (*[]string, bool) {
	if o == nil || o.Characteristics == nil {
		return nil, false
	}
	return o.Characteristics, true
}

// HasCharacteristics returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasCharacteristics() bool {
	if o != nil && o.Characteristics != nil {
		return true
	}

	return false
}

// SetCharacteristics gets a reference to the given []string and assigns it to the Characteristics field.
func (o *ResultAllOfAnalysisMetadata) SetCharacteristics(v []string) {
	o.Characteristics = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetChecksum() int32 {
	if o == nil || o.Checksum == nil {
		var ret int32
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetChecksumOk() (*int32, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given int32 and assigns it to the Checksum field.
func (o *ResultAllOfAnalysisMetadata) SetChecksum(v int32) {
	o.Checksum = &v
}

// GetCompileTime returns the CompileTime field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetCompileTime() string {
	if o == nil || o.CompileTime == nil {
		var ret string
		return ret
	}
	return *o.CompileTime
}

// GetCompileTimeOk returns a tuple with the CompileTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetCompileTimeOk() (*string, bool) {
	if o == nil || o.CompileTime == nil {
		return nil, false
	}
	return o.CompileTime, true
}

// HasCompileTime returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasCompileTime() bool {
	if o != nil && o.CompileTime != nil {
		return true
	}

	return false
}

// SetCompileTime gets a reference to the given string and assigns it to the CompileTime field.
func (o *ResultAllOfAnalysisMetadata) SetCompileTime(v string) {
	o.CompileTime = &v
}

// GetContainsCompressedData returns the ContainsCompressedData field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetContainsCompressedData() bool {
	if o == nil || o.ContainsCompressedData == nil {
		var ret bool
		return ret
	}
	return *o.ContainsCompressedData
}

// GetContainsCompressedDataOk returns a tuple with the ContainsCompressedData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetContainsCompressedDataOk() (*bool, bool) {
	if o == nil || o.ContainsCompressedData == nil {
		return nil, false
	}
	return o.ContainsCompressedData, true
}

// HasContainsCompressedData returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasContainsCompressedData() bool {
	if o != nil && o.ContainsCompressedData != nil {
		return true
	}

	return false
}

// SetContainsCompressedData gets a reference to the given bool and assigns it to the ContainsCompressedData field.
func (o *ResultAllOfAnalysisMetadata) SetContainsCompressedData(v bool) {
	o.ContainsCompressedData = &v
}

// GetEPBytes returns the EPBytes field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetEPBytes() string {
	if o == nil || o.EPBytes == nil {
		var ret string
		return ret
	}
	return *o.EPBytes
}

// GetEPBytesOk returns a tuple with the EPBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetEPBytesOk() (*string, bool) {
	if o == nil || o.EPBytes == nil {
		return nil, false
	}
	return o.EPBytes, true
}

// HasEPBytes returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasEPBytes() bool {
	if o != nil && o.EPBytes != nil {
		return true
	}

	return false
}

// SetEPBytes gets a reference to the given string and assigns it to the EPBytes field.
func (o *ResultAllOfAnalysisMetadata) SetEPBytes(v string) {
	o.EPBytes = &v
}

// GetEntryPoint returns the EntryPoint field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetEntryPoint() int32 {
	if o == nil || o.EntryPoint == nil {
		var ret int32
		return ret
	}
	return *o.EntryPoint
}

// GetEntryPointOk returns a tuple with the EntryPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetEntryPointOk() (*int32, bool) {
	if o == nil || o.EntryPoint == nil {
		return nil, false
	}
	return o.EntryPoint, true
}

// HasEntryPoint returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasEntryPoint() bool {
	if o != nil && o.EntryPoint != nil {
		return true
	}

	return false
}

// SetEntryPoint gets a reference to the given int32 and assigns it to the EntryPoint field.
func (o *ResultAllOfAnalysisMetadata) SetEntryPoint(v int32) {
	o.EntryPoint = &v
}

// GetImageBase returns the ImageBase field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetImageBase() int64 {
	if o == nil || o.ImageBase == nil {
		var ret int64
		return ret
	}
	return *o.ImageBase
}

// GetImageBaseOk returns a tuple with the ImageBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetImageBaseOk() (*int64, bool) {
	if o == nil || o.ImageBase == nil {
		return nil, false
	}
	return o.ImageBase, true
}

// HasImageBase returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasImageBase() bool {
	if o != nil && o.ImageBase != nil {
		return true
	}

	return false
}

// SetImageBase gets a reference to the given int32 and assigns it to the ImageBase field.
func (o *ResultAllOfAnalysisMetadata) SetImageBase(v int64) {
	o.ImageBase = &v
}

// GetLinkerVersion returns the LinkerVersion field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetLinkerVersion() string {
	if o == nil || o.LinkerVersion == nil {
		var ret string
		return ret
	}
	return *o.LinkerVersion
}

// GetLinkerVersionOk returns a tuple with the LinkerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetLinkerVersionOk() (*string, bool) {
	if o == nil || o.LinkerVersion == nil {
		return nil, false
	}
	return o.LinkerVersion, true
}

// HasLinkerVersion returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasLinkerVersion() bool {
	if o != nil && o.LinkerVersion != nil {
		return true
	}

	return false
}

// SetLinkerVersion gets a reference to the given string and assigns it to the LinkerVersion field.
func (o *ResultAllOfAnalysisMetadata) SetLinkerVersion(v string) {
	o.LinkerVersion = &v
}

// GetPDBPath returns the PDBPath field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetPDBPath() string {
	if o == nil || o.PDBPath == nil {
		var ret string
		return ret
	}
	return *o.PDBPath
}

// GetPDBPathOk returns a tuple with the PDBPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetPDBPathOk() (*string, bool) {
	if o == nil || o.PDBPath == nil {
		return nil, false
	}
	return o.PDBPath, true
}

// HasPDBPath returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasPDBPath() bool {
	if o != nil && o.PDBPath != nil {
		return true
	}

	return false
}

// SetPDBPath gets a reference to the given string and assigns it to the PDBPath field.
func (o *ResultAllOfAnalysisMetadata) SetPDBPath(v string) {
	o.PDBPath = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetSections() int32 {
	if o == nil || o.Sections == nil {
		var ret int32
		return ret
	}
	return *o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetSectionsOk() (*int32, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given int32 and assigns it to the Sections field.
func (o *ResultAllOfAnalysisMetadata) SetSections(v int32) {
	o.Sections = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetSignature() int32 {
	if o == nil || o.Signature == nil {
		var ret int32
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetSignatureOk() (*int32, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given int32 and assigns it to the Signature field.
func (o *ResultAllOfAnalysisMetadata) SetSignature(v int32) {
	o.Signature = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ResultAllOfAnalysisMetadata) SetSize(v int32) {
	o.Size = &v
}

// GetSubsystem returns the Subsystem field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetSubsystem() string {
	if o == nil || o.Subsystem == nil {
		var ret string
		return ret
	}
	return *o.Subsystem
}

// GetSubsystemOk returns a tuple with the Subsystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetSubsystemOk() (*string, bool) {
	if o == nil || o.Subsystem == nil {
		return nil, false
	}
	return o.Subsystem, true
}

// HasSubsystem returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasSubsystem() bool {
	if o != nil && o.Subsystem != nil {
		return true
	}

	return false
}

// SetSubsystem gets a reference to the given string and assigns it to the Subsystem field.
func (o *ResultAllOfAnalysisMetadata) SetSubsystem(v string) {
	o.Subsystem = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResultAllOfAnalysisMetadata) SetType(v string) {
	o.Type = &v
}

// GetVersionInfo returns the VersionInfo field value if set, zero value otherwise.
func (o *ResultAllOfAnalysisMetadata) GetVersionInfo() ResultAllOfAnalysisMetadataVersionInfo {
	if o == nil || o.VersionInfo == nil {
		var ret ResultAllOfAnalysisMetadataVersionInfo
		return ret
	}
	return *o.VersionInfo
}

// GetVersionInfoOk returns a tuple with the VersionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultAllOfAnalysisMetadata) GetVersionInfoOk() (*ResultAllOfAnalysisMetadataVersionInfo, bool) {
	if o == nil || o.VersionInfo == nil {
		return nil, false
	}
	return o.VersionInfo, true
}

// HasVersionInfo returns a boolean if a field has been set.
func (o *ResultAllOfAnalysisMetadata) HasVersionInfo() bool {
	if o != nil && o.VersionInfo != nil {
		return true
	}

	return false
}

// SetVersionInfo gets a reference to the given ResultAllOfAnalysisMetadataVersionInfo and assigns it to the VersionInfo field.
func (o *ResultAllOfAnalysisMetadata) SetVersionInfo(v ResultAllOfAnalysisMetadataVersionInfo) {
	o.VersionInfo = &v
}

func (o ResultAllOfAnalysisMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Characteristics != nil {
		toSerialize["Characteristics"] = o.Characteristics
	}
	if o.Checksum != nil {
		toSerialize["Checksum"] = o.Checksum
	}
	if o.CompileTime != nil {
		toSerialize["Compile Time"] = o.CompileTime
	}
	if o.ContainsCompressedData != nil {
		toSerialize["Contains Compressed Data"] = o.ContainsCompressedData
	}
	if o.EPBytes != nil {
		toSerialize["EP Bytes"] = o.EPBytes
	}
	if o.EntryPoint != nil {
		toSerialize["Entry Point"] = o.EntryPoint
	}
	if o.ImageBase != nil {
		toSerialize["Image Base"] = o.ImageBase
	}
	if o.LinkerVersion != nil {
		toSerialize["Linker Version"] = o.LinkerVersion
	}
	if o.PDBPath != nil {
		toSerialize["PDB Path"] = o.PDBPath
	}
	if o.Sections != nil {
		toSerialize["Sections"] = o.Sections
	}
	if o.Signature != nil {
		toSerialize["Signature"] = o.Signature
	}
	if o.Size != nil {
		toSerialize["Size"] = o.Size
	}
	if o.Subsystem != nil {
		toSerialize["Subsystem"] = o.Subsystem
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.VersionInfo != nil {
		toSerialize["VersionInfo"] = o.VersionInfo
	}
	return json.Marshal(toSerialize)
}

type NullableResultAllOfAnalysisMetadata struct {
	value *ResultAllOfAnalysisMetadata
	isSet bool
}

func (v NullableResultAllOfAnalysisMetadata) Get() *ResultAllOfAnalysisMetadata {
	return v.value
}

func (v *NullableResultAllOfAnalysisMetadata) Set(val *ResultAllOfAnalysisMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableResultAllOfAnalysisMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableResultAllOfAnalysisMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultAllOfAnalysisMetadata(val *ResultAllOfAnalysisMetadata) *NullableResultAllOfAnalysisMetadata {
	return &NullableResultAllOfAnalysisMetadata{value: val, isSet: true}
}

func (v NullableResultAllOfAnalysisMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultAllOfAnalysisMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


